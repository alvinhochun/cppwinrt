name: CI Tests (mingw-w64 GCC and Clang)
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  test-llvm-mingw-cppwinrt:
    name: 'llvm-mingw: Build and test'
    strategy:
      fail-fast: false
      matrix:
        arch: [i686, x86_64]
        config: [Debug, Release]
    runs-on: windows-latest
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3

      - id: setup-llvm
        name: Set up llvm-mingw
        uses: ./.github/actions/setup-llvm-mingw
        with:
          host-arch: ${{ matrix.arch }}

      - name: Build cppwinrt
        run: |
          mkdir build
          cd build
          if ("${{ matrix.config }}" -eq "Debug") {
            $sanitizers = "TRUE"
          } else {
            $sanitizers = "FALSE"
          }
          cmake ../ -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.config }} `
            -DDOWNLOAD_WINDOWSNUMERICS=TRUE `
            -DUSE_ANSI_COLOR=TRUE `
            -DCMAKE_CXX_FLAGS="-fansi-escape-codes" `
            -DENABLE_TEST_SANITIZERS=$sanitizers
          cmake --build . -j2 --target cppwinrt

      - name: Upload cppwinrt.exe
        uses: actions/upload-artifact@v3
        with:
          name: llvm-mingw-build-${{ matrix.arch }}-bin
          path: build/cppwinrt.exe

      - name: Build tests
        run: |
          cd build
          cmake --build . -j2 --target test-vanilla test_cpp20 test_cpp20_no_sourcelocation test_win7 test_old

      - name: Upload test binaries
        uses: actions/upload-artifact@v3
        with:
          name: llvm-mingw-tests-${{ matrix.arch }}-bin
          path: build/test/*.exe

      - name: Run tests
        run: |
          cd build
          $env:UBSAN_OPTIONS = "print_stacktrace=1"
          ctest --verbose

  test-msys2-gcc-cppwinrt:
    name: 'gcc/msys2: Build and test (${{ matrix.sys }}, ${{ matrix.config }})'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { sys: mingw32, arch: i686, config: Release }
          - { sys: mingw64, arch: x86_64, config: Debug }
          - { sys: mingw64, arch: x86_64, config: Release }
          - { sys: ucrt64, arch: x86_64, config: Release }
    runs-on: windows-latest
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          pacboy: >-
            crt:p
            gcc:p
            binutils:p
            cmake:p
            ninja:p

      - uses: actions/checkout@v3

      - name: Build cppwinrt
        run: |
          mkdir build
          cd build
          if [[ "${{ matrix.arch }}" = "i686" ]]; then
            skip_large_pch_arg="-DSKIP_LARGE_PCH=TRUE"
          fi
          cmake ../ -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DDOWNLOAD_WINDOWSNUMERICS=TRUE \
            -DUSE_ANSI_COLOR=TRUE \
            $skip_large_pch_arg
          cmake --build . --target cppwinrt

      - name: Build tests
        run: |
          cd build
          cmake --build . -j2 --target test-vanilla test_cpp20 test_cpp20_no_sourcelocation test_win7 test_old

      - name: Run tests
        run: |
          cd build
          ctest --verbose

  build-linux-cross-cppwinrt:
    name: 'cross: Cross-build from Linux'
    strategy:
      matrix:
        arch: [i686, x86_64]
    runs-on: ubuntu-22.04
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3

      - name: Install cross compiler
        run: |
          arch=${{ matrix.arch }}
          sudo apt-get install g++-mingw-w64-${arch/_/-}
          sudo update-alternatives --set "${{ matrix.arch }}-w64-mingw32-gcc" "/usr/bin/${{ matrix.arch }}-w64-mingw32-gcc-posix"
          sudo update-alternatives --set "${{ matrix.arch }}-w64-mingw32-g++" "/usr/bin/${{ matrix.arch }}-w64-mingw32-g++-posix"

      - name: Cross-build cppwinrt
        run: |
          cmake -S . -B build/cross_x64/ --toolchain cross-mingw-toolchain.cmake \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_CXX_FLAGS="-static" \
            -DCMAKE_INSTALL_PREFIX=$PWD/install/
          cmake --build build/cross_x64/ --target install -j2

      - name: Upload cppwinrt.exe
        uses: actions/upload-artifact@v3
        with:
          name: cross-build-${{ matrix.arch }}-bin
          path: install/bin/cppwinrt.exe

  test-linux-cross-cppwinrt:
    name: 'cross: Test run on Windows'
    needs: build-linux-cross-cppwinrt
    strategy:
      fail-fast: false
      matrix:
        arch: [i686, x86_64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fetch cppwinrt executable
        uses: actions/download-artifact@v3
        with:
          name: cross-build-${{ matrix.arch }}-bin
          path: ./.test

      - name: Run cppwinrt to build projection
        run: |
          .\.test\cppwinrt.exe -in local -out .\.test\out -verbose

      - id: setup-llvm
        name: Set up llvm-mingw
        uses: ./.github/actions/setup-llvm-mingw
        with:
          host-arch: ${{ matrix.arch }}

      - name: Build cppwinrt tests
        run: |
          mkdir build
          cd build
          cmake ../test -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug `
            -DCPPWINRT_PROJECTION_INCLUDE_DIR="../.test/out" `
            -DDOWNLOAD_WINDOWSNUMERICS=TRUE `
            -DUSE_ANSI_COLOR=TRUE
          cmake --build . -j2

      - name: Run tests
        run: |
          cd build
          ctest --verbose

  build-linux-native-cppwinrt:
    name: 'linux: GCC native build + mingw-w64 cross-build tests'
    strategy:
      fail-fast: false
      matrix:
        # TODO: Enable gcc build once Arch Linux gets more recent mingw-w64 headers (ver. 11 perhaps?)
        # cross_toolchain: [gcc, llvm-mingw]
        cross_toolchain: [llvm-mingw]
        cross_arch: [i686, x86_64]
        # include:
        #   - cross_toolchain: gcc
        #     container:
        #       image: archlinux:base-devel
    runs-on: ubuntu-22.04
    container: ${{ matrix.container }}
    defaults:
      run:
        shell: bash
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3

      - name: Install build tools
        if: matrix.cross_toolchain == 'gcc'
        run: |
          pacman --noconfirm -Suuy
          pacman --needed --noconfirm -S cmake ninja git

      - name: Build cppwinrt
        run: |
          cmake -S . -B build/native/ \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=$PWD/install/
          cmake --build build/native/ --target install -j2

      - name: Test run (cppwinrt -?)
        run: |
          install/bin/cppwinrt -?

      - name: Test run (build projection using Windows.winmd)
        run: |
          curl -o Windows.winmd -L https://github.com/microsoft/windows-rs/raw/master/crates/libs/metadata/default/Windows.winmd
          install/bin/cppwinrt -in Windows.winmd -out /tmp/cppwinrt -verbose

      - id: setup-llvm
        name: Set up llvm-mingw
        if: matrix.cross_toolchain == 'llvm-mingw'
        uses: ./.github/actions/setup-llvm-mingw

      - name: Install GCC cross compiler
        if: matrix.cross_toolchain == 'gcc'
        run: |
          pacman --needed --noconfirm -S mingw-w64-gcc

      - name: Cross-build tests using projection
        run: |
          cmake -S test -B build/cross-tests --toolchain "$PWD/cross-mingw-toolchain.cmake" \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cross_arch }} \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-static" \
            -DCPPWINRT_PROJECTION_INCLUDE_DIR=/tmp/cppwinrt \
            -DDOWNLOAD_WINDOWSNUMERICS=TRUE \
            -DUSE_ANSI_COLOR=TRUE
          cmake --build build/cross-tests -j2

      - name: Upload built tests
        uses: actions/upload-artifact@v3
        with:
          name: linux-native-cppwinrt-cross-build-tests-${{ matrix.cross_toolchain }}-${{ matrix.cross_arch }}-bin
          path: build/cross-tests/*.exe

  test-linux-native-cppwinrt-cross-tests:
    name: 'linux: Run llvm-mingw cross-build tests'
    needs: build-linux-native-cppwinrt
    strategy:
      fail-fast: false
      matrix:
        # TODO: Enable gcc build test when it is buildable
        # cross_toolchain: [gcc, llvm-mingw]
        cross_toolchain: [llvm-mingw]
        cross_arch: [i686, x86_64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fetch test executables
        uses: actions/download-artifact@v3
        with:
          name: linux-native-cppwinrt-cross-build-tests-${{ matrix.cross_toolchain }}-${{ matrix.cross_arch }}-bin
          path: ./

      - name: Run tests
        run: |
          $test_exes = ls *.exe -Name
          $has_failed_tests = 0
          foreach ($test_exe in $test_exes) {
            echo "::group::Run '$test_exe'"
            & .\$test_exe --use-colour yes
            echo "::endgroup::"
            if ($LastExitCode -ne 0) {
              echo "::error::Test '$test_exe' failed!"
              $has_failed_tests = 1
            }
          }
          if ($has_failed_tests -ne 0) {
            exit 1
          }

  build-macos-native-cppwinrt:
    name: 'macOS: GCC native build'
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3

      - name: Build cppwinrt
        run: |
          cmake -S . -B build/native/ \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=$PWD/install/
          cmake --build build/native/ --target install -j2

      - name: Test run (cppwinrt -?)
        run: |
          install/bin/cppwinrt -?

      - name: Test run (build projection using Windows.winmd)
        run: |
          curl -o Windows.winmd -L https://github.com/microsoft/windows-rs/raw/master/crates/libs/metadata/default/Windows.winmd
          install/bin/cppwinrt -in Windows.winmd -out build/out -verbose
